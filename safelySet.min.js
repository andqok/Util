function safelySetNumber(a,...b){function c(a,...b){const e=b.shift();if(e){
const f=a[e],g=Object(f)===f;return g&&(a[e]=c(a[e],...b)),
"number"==typeof f&&(a[e]=f+d),"undefined"==typeof f&&(a[e]=c({},...b)),a}
return d}const d=b.pop();return c(a,...b)}

function safelySetArray(a,...b){function c(a,b){const e=b.shift();
return e?(a[e]||(a[e]={}),Array.isArray(a[e]))?(a[e].push(d),a):(
a[e]=c(a[e],b),a):[d]}const d=b.pop(),e=Object(a)!==a,f=b.every(
a=>"string"==typeof a||Number.isFinite(a));if(e)throw new Error(
"Tree is not an object.");if("undefined"==typeof a)throw new Error(
"Tree cannot be undefined or null.");if(!f)throw new Error(
"Not all branches are valid object properties.");return c(a,b)}

function safelySetArrayUnique(a,...b){function c(a,b){const e=b.shift();
return e?(a[e]||(a[e]={}),Array.isArray(a[e]))?(a[e].includes(d)||a[e].push(
d),a):(a[e]=c(a[e],b),a):[d]}const d=b.pop(),e=Object(a)!==a,f=b.every(
a=>"string"==typeof a||Number.isFinite(a));if(e)throw new Error(
"Tree is not an object.");if("undefined"==typeof a)throw new Error(
"Tree cannot be undefined or null.");if(!f)throw new Error(
"Not all branches are valid object properties.");return c(a,b)}

function safelySetObject(a,...b){function c(a,b){const d=b.shift();
return!d||void(a[d]||(a[d]={}),c(a[d],b))}const d=Object(a)!==a,e=b.every(e),
f=b.every(e);if("undefined"==typeof a)throw new Error(
"Tree cannot be undefined or null.");if(d)throw new Error(
"Tree is not an object.");if(!f)throw new Error(
"Not all branches are valid object properties.");return c(a,b),a}
